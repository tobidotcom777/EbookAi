from agency_swarm.agents import Agent  # Import the Agent class
from agency_swarm.tools import BaseTool
from pydantic import Field
from fpdf import FPDF  # Importing FPDF for PDF generation

class EbookPDFGenerator(BaseTool):
    """
    This tool generates a well-formatted PDF ebook using the provided content
    and cover image. It is assumed that content and cover are generated by other tools.
    """

    content: str = Field(
        ..., description="The content of the ebook, including chapters, sections, and paragraphs."
    )
    cover_image_path: str = Field(
        ..., description="Path to the cover image file to be included in the ebook."
    )
    output_filename: str = Field(
        "ebook.pdf", description="The name of the output PDF file."
    )

    def run(self):
        """
        Generates a PDF ebook with the provided content and cover image.
        """
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)

        # Add cover page
        pdf.add_page()
        pdf.image(self.cover_image_path, x=10, y=10, w=190)  # Adjust image size and position as needed

        # Add ebook content
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        for line in self.content.split("\n"):
            pdf.multi_cell(0, 10, line)
        
        # Save the PDF
        pdf_file_path = self.output_filename
        pdf.output(pdf_file_path)
        
        return f"PDF ebook generated successfully: {pdf_file_path}"

class EbookPDFGenerationAgent(Agent):
    def __init__(self, **kwargs):
        super().__init__(
            name="EbookPDFGenerationAgent",
            description="This agent generates a well-formatted PDF ebook using provided content and cover image.",
            instructions="./instructions.md",
            files_folder="./files",
            schemas_folder="./schemas",
            tools=[EbookPDFGenerator],
            tools_folder="./tools",
            **kwargs
        )

    def response_validator(self, message):
        return message
